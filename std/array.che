use import std.mem.allocator
use import std.mem.std_heap_allocator
use import std.iterator
C :: import std.c

#export_scope

Array :: struct(T: type) {
    data            : ^mut T
    capacity        : int
    length          : int
    allocator       : ^Allocator
    ElementType     :: T 
}

impl(T: type) Drop for Array[T] {
    drop :: (&Self) {
        // destruct values
        for 0..length {
            Memory.drop(data[it])
        }

        free(data, allocator)
        // data = null
        // length = 0
    }
}

impl(T: type) Clone for Array[T] if T : Clone {
    clone :: (&Self) -> Self {
        result := Array[T].create(self.count())
        for(by_ref=true) v in self.slice() {
            result.add(v.clone())
        }
        return result
    }
}

impl(T: type) Array[T] {
    create :: (initial_capacity: int = 10, allocator: ^Allocator = ^DEFAULT_STD_HEAP_ALLOCATOR) -> Self {
        s := Array[T](null, 0, 0, allocator)
        s.reserve(initial_capacity)
        C.memset(cast s.get_raw(), 0, cast(uint) (s.get_capacity() * @sizeof(T)))
        return s
    }

    new :: (initial_capacity: int = 10, allocator: ^Allocator = ^DEFAULT_STD_HEAP_ALLOCATOR) -> Self {
        s := Array[T](null, 0, 0, allocator)
        s.reserve(initial_capacity)
        C.memset(cast s.get_raw(), 0, cast(uint) (s.get_capacity() * @sizeof(T)))
        return s
    }

    from_slice :: (data: []$T, allocator: ^Allocator = ^DEFAULT_STD_HEAP_ALLOCATOR) -> Self {
        s := Array[T](null, 0, 0, allocator)
        s.reserve(data.length)
        for &d in data {
            if const @is_copy(T) then s.add(*d)
            else s.add(d.clone())
        }
        return s
    }

    reserve :: (&mut Self, mut size: int) {
        // don't allow size 0
        if size <= 0 {
            size = 1
        }

        @assert(length <= size)
        if capacity >= size {
            return
        }

        capacity = size
        data = realloc_raw(data, cast size, allocator)

        if size > length {
            C.memset(cast ^data[length], 0, cast(uint) ((size - length) * @sizeof(T)))
        }

        if length > capacity {
            length = capacity
        }
    }

    get_length :: (&Self) -> int {
        return length
    }

    count :: (&Self) -> int {
        return length
    }

    get_capacity :: (&Self) -> int {
        return capacity
    }

    get_raw :: (&Self) -> ^T {
        return data
    }

    get_raw_mut :: (&Self) -> ^mut T {
        return data
    }

    clear :: (&mut Self) {
        for 0..length do Memory.drop(data[it])
        length = 0
    }

    add :: (&mut Self, val: T) {
        if get_capacity() <= get_length() {
            reserve(get_capacity() * 2)
        }

        data[length] = val
        length += 1
    }

    add_slice :: (&mut Self, values: []T) {
        required_size := count() + values.length
        mut cap := get_capacity()
        while cap <= required_size {
            cap *= 2
        }
        reserve(cap)

        C.memcpy(^data[length], values.data, cast @sizeof(T) * values.length)
        length += values.length
    }

    push :: (&mut Self, val: T) {
        if get_capacity() <= get_length() {
            reserve(get_capacity() * 2)
        }

        data[length] = val
        length += 1
    }

    pop :: (&mut Self) -> T {
        @assert(length > 0)

        length -= 1
        return data[length]
    }

    peek_last :: (&Self) -> &mut T {
        @assert(length > 0, "Array is empty")
        return &mut data[length - 1]
    }

    get :: (&Self, index: int) -> Option[T] {
        if index < 0 or index >= length {
            return None
        } else {
            return Some(data[index])
        }
    }

    remove_at :: (&mut Self, index: int) -> T {
        @assert(index >= 0 and index < get_length())

        result := data[length]
        length -= 1

        while mut i := index, i < length, i += 1 {
            data[i] = data[i + 1]
        }

        return result
    }

    index_of :: (&mut Self, data: $D, pred: fn(&T, D) -> bool) -> Option[int] {
        for &value in self.slice() {
            if pred(value, data) {
                return Some(it_index)
            }
        }
        return None
    }

    access_unchecked :: (&Self, index: int) -> &T {
        return &data[index]
    }

    access_unchecked_mut :: (&mut Self, index: int) -> &mut T {
        return &data[index]
    }

    access :: (&Self, index: int) -> &T #operator("[]") {
        if !(index >= 0 and index < length) {
            C.printf("%lld`n", index)
        }
        @assert(index >= 0 and index < length, "Index was out of range")
        return &data[index]
    }

    access_mut :: (&mut Self, index: int) -> &mut T #operator("[]") {
        if !(index >= 0 and index < length) {
            C.printf("%lld`n", index)
        }
        @assert(index >= 0 and index < length, "Index was out of range")
        return &data[index]
    }

    sliceFL :: (&Self, from: int, len: int) -> []T {
        @assert(from >= 0 and len >= 0 and from + len <= length, "Invalid range")
        mut slice : []T = ^data[from]
        slice.length = len
        return slice
    }

    slice :: (&Self) -> []T {
        return self.sliceFL(0, length)
    }

    slice_mut :: (&Self) -> []mut T {
        mut slice : []mut T = ^mut data[0]
        slice.length = length
        return slice
    }

    sliceF :: (&Self, from: int) -> []T {
        return self.sliceFL(from, length - from)
    }
    
    sliceL :: (&Self, len: int) -> []T {
        return self.sliceFL(0, len)
    }

    // get_range :: (&Self, range: Range[int]) -> []T #operator("[]") {
    //     data := int(self.bytes.data) + range.start
    //     length := range.end - range.start
    //     return string(cast data, length)
    // }

    // get_range_inclusive :: (&Self, range: RangeInclusive[int]) -> []T #operator("[]") {
    //     data := int(self.bytes.data) + range.start
    //     length := range.end - range.start + 1
    //     return string(cast data, length)
    // }

    // get_range_to :: (&Self, range: RangeTo[int]) -> []T #operator("[]") {
    //     @assert(range.end >= 0 and range.end <= self.bytes.length)
    //     data := int(self.bytes.data)
    //     length := range.end
    //     return string(cast data, length)
    // }

    // get_range_to_incl :: (&Self, range: RangeToInclusive[int]) -> []T #operator("[]") {
    //     @assert(range.end >= 0 and range.end < self.bytes.length)
    //     data := int(self.bytes.data)
    //     length := range.end + 1
    //     return string(cast data, length)
    // }

    // get_range_from :: (&Self, range: RangeFrom[int]) -> []T #operator("[]") {
    //     if !(range.start >= 0 and range.start <= self.bytes.length) {
    //         _C.printf("%lld, %lld`n", range.start, self.bytes.length)
    //     }
    //     @assert(range.start >= 0 and range.start <= self.bytes.length)
    //     data := int(self.bytes.data) + range.start
    //     length := self.bytes.length - range.start
    //     return string(cast data, length)
    // }

    get_range_full :: (&Self, range: RangeFull) -> []T #operator("[]") {
        return self.slice()
    }

    sort :: (&mut Self, cmp: fn (&T, &T) -> int) -> &Self {
        quick_sort(0, length - 1, cmp)

        return self
    }

    quick_sort :: (&mut Self, from: int, to: int, cmp: fn (&T, &T) -> int) {
        if from >= to {
            return
        }

        mut idx := from
        pivot := data[to]

        for i in from..to {
            if cmp(&data[i], &pivot) > 0 {
                (data[idx], data[i]) = (data[i], data[idx])
                idx += 1
            }
        }
        (data[idx], data[to]) = (data[to], data[idx])

        quick_sort(from, idx - 1, cmp)
        quick_sort(idx + 1, to, cmp)
    }

    iterator :: (&Self) -> ArrayIterator[T] {
        return ArrayIterator[T](self, 0)
    }

    // change_type :: (Self, $T2: type) -> Array[T2] {
    //     @static_assert(@sizeof(T) == @sizeof(T2))
    //     result := Array[T2](
    //         data        = cast data
    //         capacity    = capacity
    //         length      = length
    //         allocator   = allocator
    //     )

    //     self.data = null
    //     self.capacity = 0
    //     self.length = 0
    //     self.allocator = null

    //     return result
    // }
}

// @todo: only apply this impl if T is default constructable, e.g.:
// impl(T: type) Array(T) if @is_default_constructable(T) { ...
impl(T: type) Array[T] if @is_default_constructable(T) {
    resize :: (&mut Self, size: int) {
        if capacity < size {
            self.reserve(size)
        }

        for size..length do Memory.drop(data[it])
        length = size
    }
}

ArrayIterator :: struct(T: type) #copy {
    array: &Array[T]
    index: int
}

// impl(T: type) Iterator[T] for ArrayIterator[T] {
//     next :: (&Self) -> Option[T] {
//         index += 1
//         return if index > array.length { None } else { Some(array[index - 1]) }
//     }
// }

impl(F: type, T: type) Into[Array[T]] for Array[F] if F : Into[T], #notyet {
    into :: (&Self) -> Array[T] {
        mut result := Array[T].create(self.get_length())
        for 0..self.get_length() {
            result.add(F.into(self.access_unchecked(it)))
        }
        return result
    }
}

impl(F: type, T: type) From[Array[F]] for Array[T] if T : From[F], #notyet {
    from :: (value: Array[F]) -> Array[T] {
        mut result := Array[T].create(value.get_length())
        for 0..value.get_length() {
            result.add(F.into(value.access_unchecked(it)))
        }
        return result
    }
}

// for_extension_array_T :: (arr: &Array[$T], code: Code, reverse: bool = false,
//                             by_ref: bool = true) #for {
//     while mut it_index := 0, it_index < arr.get_length(), it_index += 1 {
//         if const reverse {
//             it_index_rev := arr.length - it_index - 1
//             if const by_ref {
//                 it := arr[it_index_rev]
//             } else {
//                 it := *arr[it_index_rev]
//             }
//             @insert(code, link=[it_index_rev], _break=break, _continue=continue)
//         } else {
//             if const by_ref {
//                 it := arr[it_index]
//             } else {
//                 it := *arr[it_index]
//             }
//             @insert(code, _break=break, _continue=continue)
//         }
//     }
// }

for_extension_array_T_mut :: (arr: &mut Array[$T], code: Code, reverse: bool = false,
                            by_ref: bool = true) #for {
    while mut it_index := 0, it_index < arr.get_length(), it_index += 1 {
        if const reverse {
            it_index_rev := arr.length - it_index - 1
            if const by_ref {
                mut it : &mut T = arr.access_unchecked_mut(it_index_rev)
            } else {
                mut it : T = *arr.access_unchecked_mut(it_index_rev)
            }
            @insert(code, link=[it_index_rev], _break=break, _continue=continue)
        } else {
            if const by_ref {
                mut it : &mut T = arr.access_unchecked_mut(it_index)
            } else {
                mut it : T = *arr.access_unchecked_mut(it_index)
            }
            @insert(code, _break=break, _continue=continue)
        }
    }
}

impl(T: type) Into[Array[T]] for []T if T : Clone, #notyet {
    into :: (&Self) -> Array[T] {
        mut result := Array[T].create(self.length)
        for(by_ref=true) v in self[..] {
            result.add(v.clone())
        }
        return result
    }
}
