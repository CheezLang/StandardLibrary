use import std.mem.allocator
use import std.array
use import std.rc
use import std.ring_queue

io :: import std.io

C :: import std.c

#export_scope

if const @is_os("windows") {
    use import std.os.windows
    use import std.os.windows_functions
    use import std.os.windows_constants
    use import std.os.windows_types
    use import std.os.windows_macros

    ThreadHandle :: HANDLE
    MutexHandle :: HANDLE
}
if const @is_os("linux") {
    use import std.os.linux
    use import std.os.posix

    ThreadHandle :: pthread_t
    MutexHandle :: pthread_mutex_t
}

mut current_thread_data : ^mut ThreadData = null #thread_local

// thread
Thread :: struct {
    data: ^ThreadData
}

ThreadData :: struct {
    handle  : ThreadHandle
    user    : ^void
    func    : Fn(^void)
    id      : u64
}

impl Thread {
    current :: () -> ^ThreadData {
        if current_thread_data == null {
            current_thread_data = alloc(ThreadData)

            if const @is_os("windows") {
                *current_thread_data = ThreadData(
                    handle  = GetCurrentThread()
                    user    = null
                    func    = null
                    id      = cast GetCurrentThreadId()
                )
            }
            if const @is_os("linux") {
                id := pthread_self()
                *current_thread_data = ThreadData(
                    handle  = id
                    user    = null
                    func    = null
                    id      = cast id
                )
            }
        }
        return current_thread_data
    }

    create :: (func: Fn(^$T), user_data: ^$T) -> Thread {
        thread_data := alloc(ThreadData)
        thread_data.func = @cast(Fn(^void), func)
        thread_data.user = @cast(^void, user_data)

        if const @is_os("windows") {
            thread_func :: (data: ^void) -> u32 #stdcall {
                thread_data := @cast(^mut ThreadData, data)
                current_thread_data = thread_data
                thread_data.func(thread_data.user)
                return 0
            }

            thread_data.handle = CreateThread(null, 0, thread_func, cast thread_data, 0, null)
            thread_data.id = cast GetThreadId(thread_data.handle)
            @assert(thread_data.handle != null)
        }
        if const @is_os("linux") {
            thread_func :: (data: ^void) -> ^void {
                thread_data := @cast(^mut ThreadData, data)
                current_thread_data = thread_data
                thread_data.func(thread_data.user)
                return null
            }
            {
                attr : pthread_attr_t = default
                result := pthread_create(^thread_data.handle, null, thread_func, cast thread_data)
                thread_data.id = cast thread_data.handle
            }
        }

        return Thread(thread_data)
    }

    new :: (func: Fn()) -> Thread {
        return create_without_data(func)
    }

    create_without_data :: (func: Fn()) -> Thread {
        // @todo: handle memory leak when thread creation fails
        thread_data := alloc(ThreadData)
        thread_data.func = @cast(Fn(^void), func)
        thread_data.user = null

        if const @is_os("windows") {
            thread_func :: (data: ^void) -> u32 #stdcall {
                thread_data := @cast(^mut ThreadData, data)
                current_thread_data = thread_data

                func := @cast(Fn(), thread_data.func)
                func()
                return 0
            }

            thread_data.handle = CreateThread(null, 0, thread_func, cast thread_data, 0, null)
            thread_data.id = cast GetThreadId(thread_data.handle)
            @assert(thread_data.handle != null)
            
        }
        if const @is_os("linux") {
            thread_func :: (data: ^void) -> ^void {
                thread_data := @cast(^mut ThreadData, data)
                current_thread_data = thread_data

                func := @cast(Fn(), thread_data.func)
                func()
                return null
            }
            {
                attr : pthread_attr_t = default
                result := pthread_create(^thread_data.handle, null, thread_func, cast thread_data)
                thread_data.id = cast thread_data.handle
            }
        }

        return Thread(thread_data)
    }

    join :: (&Self) {
        if const @is_os("windows") {
            WaitForSingleObject(data.handle, INFINITE)
        }
        if const @is_os("linux") {
            pthread_join(data.handle, null)
        }
    }

    sleep :: (millis: int) {
        if const @is_os("windows") {
            Sleep(cast millis)
        }
        if const @is_os("linux") {
            ts := timespec(
                tv_sec  = millis / 1000
                tv_nsec = (millis % 1000) * 1000000
            )

            loop {
                res := nanosleep(^ts, ^ts)
                if res == 0 then break
            }
        }
    }
}

impl Drop for Thread {
    drop :: (&Self) {
        self.join()
    }
}

// mutex
Mutex :: struct {
    handle: MutexHandle
}

impl Mutex {
    new :: () -> Mutex {
        if const @is_os("windows") {
            handle := CreateMutexA(null, 0, null)
            if handle == null {
                @panic("Failed to create mutex")
            }

            return Mutex(handle)
        }
        if const @is_os("linux") {
            mutex := Mutex(default)
            mutex_attr : pthread_mutexattr_t = default
            pthread_mutexattr_init(^mutex_attr)
            defer pthread_mutexattr_destroy(^mutex_attr)
            pthread_mutexattr_settype(^mutex_attr, PTHREAD_MUTEX_RECURSIVE)

            @assert(pthread_mutex_init(^mutex.handle, ^mutex_attr) == 0)
            return mutex
        }
    }

    try_lock :: (&Self, timeout: int) -> bool {
        if const @is_os("windows") {
            return match WaitForSingleObject(handle, cast timeout) {
                0x00000000 -> true
                0x00000080 -> true
                0x00000102 -> false
                0xFFFFFFFF -> false
                $_ -> false
            }
        }
        if const @is_os("linux") {
            return pthread_mutex_trylock(^self.handle) == 0
        }
    }

    lock :: (&Self) {
        if const @is_os("windows") {
            match WaitForSingleObject(handle, INFINITE) {
                0x00000000 -> {}
                0x00000080 -> {}
                0x00000102 -> @panic("failed to lock mutex (time out)")
                0xFFFFFFFF -> {
                    io.formatln("lock failed with windows error code {:x}", [int(GetLastError())])
                    @panic("failed to lock mutex")
                }
                $_ -> @panic("failed to lock mutex (unknown error)")
            }
        }
        if const @is_os("linux") {
            @assert(pthread_mutex_lock(^self.handle) == 0)
        }
    }

    release :: (&Self) {
        if const @is_os("windows") {
            ReleaseMutex(handle)
        }
        if const @is_os("linux") {
            @assert(pthread_mutex_unlock(^self.handle) == 0)
        }
    }
}

impl Drop for Mutex {
    drop :: (&Self) {
        if const @is_os("windows") {
            CloseHandle(self.handle)
        }
        if const @is_os("linux") {
            pthread_mutex_destroy(^self.handle)
        }
    }
}


//*
if const @is_os("windows") {
ConditionVariable :: struct {
    _impl : CONDITION_VARIABLE
}

impl ConditionVariable {
    new :: () -> Rc[ConditionVariable] {
        cond_var := Rc[ConditionVariable].new(CONDITION_VARIABLE())
        InitializeConditionVariable(^cond_var.get()._impl)
        return cond_var
    }

    wait :: (&Self, lock: &ReentrantLock) {
        SleepConditionVariableCS(^_impl, ^lock._impl, INFINITE)
    }

    notify :: (&Self) {
        WakeConditionVariable(^_impl)
    }

    notify_all :: (&Self) {
        WakeAllConditionVariable(^_impl)
    }
}


// lock
ReentrantLock :: struct {
    _impl : CRITICAL_SECTION
}

impl ReentrantLock {
    new :: () -> Rc[ReentrantLock] {
        lock := Rc[ReentrantLock].new(CRITICAL_SECTION())
        InitializeCriticalSection(^lock.get()._impl)
        return lock
    }

    try_lock :: (&Self, timeout: int) -> bool {
        return TryEnterCriticalSection(^_impl) != 0
    }

    lock :: (&Self) {
        EnterCriticalSection(^_impl)
    }

    release :: (&Self) {
        LeaveCriticalSection(^_impl)
    }
}

impl Drop for ReentrantLock {
    drop :: (&Self) {
        DeleteCriticalSection(^self._impl)
    }
}
}

// thread pool
ThreadPoolFunc :: (function: fn(^void), data: ^void)

ThreadPoolData :: struct {
    threads     : Array[Thread]
    functions   : RingQueue[ThreadPoolFunc]
    running     : bool
    mutex       : Mutex
    empty_queue : bool
}

ThreadPool :: struct {
    data: ^mut ThreadPoolData
}

impl ThreadPool {
    create :: (num_threads: int) -> Self {
        data := alloc(ThreadPoolData)
        *data = ThreadPoolData(
            threads = Array[Thread].create(num_threads)
            functions = RingQueue[ThreadPoolFunc].new(10)
            mutex = Mutex.new()
            running = true
            empty_queue  = false
        )

        // defined right here so it's not accessible outside
        worker :: (tp: ^ThreadPoolData) {
            while true {
                tp.mutex.lock()
                if !(tp.running or (tp.empty_queue and tp.functions.get_length() > 0)) {
                    break
                }

                mut next : ThreadPoolFunc = (@cast(fn(^void), null), null)
                if tp.functions.get_length() > 0 {
                    next = tp.functions.pop()
                }
                tp.mutex.release()

                if next.function != null {
                    next.function(next.data)
                } else {
                    Thread.sleep(1)
                }
            }
        }

        for 0..num_threads {
            t := Thread.create(cast(Fn(^ThreadPoolData)) worker, data)
            data.threads.add(t)
        }

        return ThreadPool(data)
    }

    count :: (&Self) -> int {
        return data.functions.get_length()
    }

    enqueue :: (&mut Self, function: fn(^$T), data_ptr: ^T) {
        data.mutex.lock()
        data.functions.push((@cast(fn(^void), function), @cast(^void, data_ptr)))
        data.mutex.release()
    }

    enqueue_mut :: (&mut Self, function: fn(^mut $T), data_ptr: ^mut T) {
        data.mutex.lock()
        data.functions.push((@cast(fn(^void), function), @cast(^void, data_ptr)))
        data.mutex.release()
    }

    terminate :: (mut self: Self, empty_queue: bool) {
        self.data.empty_queue = empty_queue
        self.data.running = false
    }
}

impl Drop for ThreadPool {
    drop :: (&mut Self) {
        data.running = false
        for &data.threads {
            it.join()
        }
    }
}
// */