mem :: import std.mem.allocator

#export_scope

Box :: struct(T: type) {
    value: ^T
}

impl(T: type) Box[T] {
    empty :: () -> Box[T] {
        return Box[T](null)
    }

    new :: (value: $K) -> Box[T] {
        ptr := mem.alloc(K)
        *ptr = value
        return Box[T](cast ptr)
    }

    from_pointer :: (ptr: ^T) -> Box[T] {
        return Box[T](ptr)
    }

    is_null :: (&Self) -> bool {
        return value == null
    }

    get :: (&Self) -> &T {
        @assert(value != null)
        return &*value
    }

    get_mut :: (&mut Self) -> &mut T {
        @assert(value != null)
        return &mut *value
    }
}

impl(T: type) Drop for Box[T] {
    drop :: (&Self) {
        mem.free(value)
        @cast(&mut Self, self).value = null
    }
}