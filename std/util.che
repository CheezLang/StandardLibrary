#export_scope

next_aligned_num :: (val: $T, align: T) -> T {
    mut mul := val + align - 1
    mul -= (mul % align)
    
    return mul
}

next_aligned :: (_add: ^$T, align: u64) -> ^T {
    add := u64(_add)
    mut mul := add + align - 1
    mul -= (mul % align)
    
    return cast mul
}

pointer_add_sized :: (ptr: $T, amount: int) -> T {
    return cast(T)((cast(int) ptr) + amount * @sizeof(@typeof(*ptr)))
}

pointer_add :: (ptr: $T, amount: int) -> T {
    return cast(T)((cast(int) ptr) + amount)
}
