use import std.string
use import std.printable
C   :: import std.c
fmt :: import std.fmt


if const @is_os("windows") {
    use import std.os.windows
    use import std.os.windows_functions
    use import std.os.windows_constants
}

#export_scope
formatln :: (format: ^any, args: []^any = []) {
    format_string := fmt.format_any(format)
    println(fmt.format(format_string.slice(), args))
}
format :: (format: ^any, args: []^any = []) {
    format_string := fmt.format_any(format)
    print(fmt.format(format_string.slice(), args))
}

println :: (v: $T) {
    s := String.empty()
    s.appendf("{}`n", v)
    print_string(&s)
}

print :: (v: $T) {
    s := String.empty()
    s.appendf("{}", v)
    print_string(&s)
}

printf :: (format: string, args: $T) {
    s := String.empty()
    s.appendf(format, args)
    print_string(&s)
}

printfln :: (format: string, args: $T) {
    s := String.empty()
    s.appendf(format, args)
    s += '`n'
    print_string(&s)
}

ConsoleColor :: enum #copy #flags {
    Black  = 0
    Red    = 0x1
    Green  = 0x2
    Blue   = 0x4
    Bright = 0x8
    White  = @bin_or(Red, Green, Blue)
}

set_console_color :: (foreground: ConsoleColor, background: ConsoleColor) {
    if const @is_os("windows") {
        fg := u16(foreground)
        bg := u16(background)
        mut attributes := 0u16

        if @bin_and(fg, u16(ConsoleColor.Red))    != 0 { attributes = @bin_or(attributes, FOREGROUND_RED) }
        if @bin_and(fg, u16(ConsoleColor.Green))  != 0 { attributes = @bin_or(attributes, FOREGROUND_GREEN) }
        if @bin_and(fg, u16(ConsoleColor.Blue))   != 0 { attributes = @bin_or(attributes, FOREGROUND_BLUE) }
        if @bin_and(fg, u16(ConsoleColor.Bright)) != 0 { attributes = @bin_or(attributes, FOREGROUND_INTENSITY) }

        if @bin_and(bg, u16(ConsoleColor.Red))    != 0 { attributes = @bin_or(attributes, BACKGROUND_RED) }
        if @bin_and(bg, u16(ConsoleColor.Green))  != 0 { attributes = @bin_or(attributes, BACKGROUND_GREEN) }
        if @bin_and(bg, u16(ConsoleColor.Blue))   != 0 { attributes = @bin_or(attributes, BACKGROUND_BLUE) }
        if @bin_and(bg, u16(ConsoleColor.Bright)) != 0 { attributes = @bin_or(attributes, BACKGROUND_INTENSITY) }

        SetConsoleTextAttribute(__std_out_handle, attributes)
    }

    if const @is_os("linux") {
        if C.isatty(1) == 0 {
            // not connected to a terminal
            return
        }

        set_color_seq := [ 0x1B, 0 ]

        fore := @bin_and(int(foreground), 0b0111)
        back := @bin_and(int(background), 0b0111)
        bold := @bin_and(int(foreground), 0b1000) != 0

        if bold {
            C.printf(cast set_color_seq.data)
            C.printf("[1m")
        } else {
            C.printf(cast set_color_seq.data)
            C.printf("[0m")
        }

        C.printf(cast set_color_seq.data)
        match fore {
            0b0000 -> C.printf("[30m")
            0b0001 -> C.printf("[31m")
            0b0010 -> C.printf("[32m")
            0b0011 -> C.printf("[33m")
            0b0100 -> C.printf("[34m")
            0b0101 -> C.printf("[35m")
            0b0110 -> C.printf("[36m")
            0b0111 -> C.printf("[37m")
        }
        C.printf(cast set_color_seq.data)
        match back {
            0b0000 -> C.printf("[40m")
            0b0001 -> C.printf("[41m")
            0b0010 -> C.printf("[42m")
            0b0011 -> C.printf("[43m")
            0b0100 -> C.printf("[44m")
            0b0101 -> C.printf("[45m")
            0b0110 -> C.printf("[46m")
            0b0111 -> C.printf("[47m")
        }
    }
}

set_console_foreground_color :: (foreground: ConsoleColor) {
    if const @is_os("windows") {
        fg := u16(foreground)
        mut attributes := 0u16

        if @bin_and(fg, u16(ConsoleColor.Red))    != 0 { attributes = @bin_or(attributes, FOREGROUND_RED) }
        if @bin_and(fg, u16(ConsoleColor.Green))  != 0 { attributes = @bin_or(attributes, FOREGROUND_GREEN) }
        if @bin_and(fg, u16(ConsoleColor.Blue))   != 0 { attributes = @bin_or(attributes, FOREGROUND_BLUE) }
        if @bin_and(fg, u16(ConsoleColor.Bright)) != 0 { attributes = @bin_or(attributes, FOREGROUND_INTENSITY) }

        SetConsoleTextAttribute(__std_out_handle, attributes)
    }

    if const @is_os("linux") {
        if C.isatty(1) == 0 {
            // not connected to a terminal
            return
        }

        set_color_seq := [ 0x1B, 0 ]

        fore := @bin_and(int(foreground), 0b0111)
        bold := @bin_and(int(foreground), 0b1000) != 0

        if bold {
            C.printf(cast set_color_seq.data)
            C.printf("[1m")
        } else {
            C.printf(cast set_color_seq.data)
            C.printf("[0m")
        }

        C.printf(cast set_color_seq.data)
        match fore {
            0b0000 -> C.printf("[30m")
            0b0001 -> C.printf("[31m")
            0b0010 -> C.printf("[32m")
            0b0011 -> C.printf("[33m")
            0b0100 -> C.printf("[34m")
            0b0101 -> C.printf("[35m")
            0b0110 -> C.printf("[36m")
            0b0111 -> C.printf("[37m")
        }
    }
}

#file_scope

print_string :: (s: &String) {
    if const @is_os("windows") {
        mode := 0u32
        if GetConsoleMode(__std_out_handle, ^mode) == 0 {
            // no console handle, use WriteFileW
            bytesWritten := 0u32

            WriteFile(__std_out_handle, cast s.get_raw(), cast s.get_length(), ^bytesWritten, null)
        } else {
            match s.slice().to_utf16() {
                Ok($str) -> {
                    bytesWritten := 0u32
                    WriteConsoleW(__std_out_handle, cast str.get_raw(), cast str.get_length(), ^bytesWritten, null)
                }
                Err -> {
                    @assert(false, "print_string failed")
                }
            }
        }
    }
    if const @is_os("linux") {
        C.printf("%.*s", i32(s.get_length()), s.get_raw())
    }
}
