use import std.string
use import std.printable
use import std.util
C  :: import std.c
io :: import std.io

#export_scope

FmtAlign :: struct #copy {
    amount      : int
    character   : char
}

align :: (amount: int, character: char = ' ') -> FmtAlign {
    return FmtAlign(amount, character)
}

impl Printable for FmtAlign {
    print :: (&Self, str: &mut String, format: string) {
        while str.get_length() < amount {
            str += character
        }
    }
}

try_parse_int :: (mut str: string, base: int = 10) -> Result[int, ()] {
    mut val := 0
    mut sign := 1

    if str.bytes.length > 0 and char(*str[0]) == '-' {
        sign = -1
        str = str[1..]
    }

    for c in str {
        if !c.is_digit_in_base(base) {
            return Err()
        }

        val *= base
        val += c.get_digit_value(base)
    }

    return Ok(val * sign)
}

parse_int :: (mut str: string) -> int {
    mut val := 0
    mut sign := 1

    if str.bytes.length > 0 and char(*str[0]) == '-' {
        sign = -1
        str = str[1..]
    } else if str.bytes.length > 0 and char(*str[0]) == '+' {
        sign = 1
        str = str[1..]
    }

    for c in str {
        val *= 10
        val += int(c - '0')
    }

    return val * sign
}

format_int :: (buffer: &mut String, mut val: $T, _base: int = 10) {
    digit_to_char :: (i: $T) -> char {
        c := char(i)
        return if i < 10 { c + '0' } else { (c - char(10)) + 'A' }
    }

    base := T(_base)

    // calculate length and sign
    mut len, sign : int, T = if val < 0 then (1, -1)
    else if val == 0 then (1, 1)
    else (0, 1)

    while mut v := val, v != 0, v /= base {
        len += 1
    }

    // reserve memory
    buffer.resize(buffer.length + len)
    
    if val == 0 {
        buffer[buffer.length - 1] = u8('0')
    } else {
        mut i := buffer.length - 1
        while val != 0, i -= 1 {
            lastDigit := (val % base) * sign

            val = val / base
            buffer[i] = u8(digit_to_char(lastDigit))
        }

        if sign < 0 {
            buffer[i] = u8('-')
            i -= 1
        }
    }
}

format_any :: (arg: ^any) -> String {
    return format("{}", [arg])
}

format_into :: (result: &mut String, text: string, args: []^any = []) {
    State :: enum #copy { Text, Format, Escape }
    use State

    mut formatSpecifier := {
        len :: 64
        mem := @alloca(u8, len)
        String.from_raw_ptr(mem.data, len)
    }

    len         := text.bytes.length
    mut argIndex:= 0
    mut state   := Text

    for c in text {
        match state {
            Text -> {
                if c == '``' {
                    state = Escape
                } else if c == '{' {
                    state = Format
                } else {
                    result += c
                }
            }

            Escape -> {
                result += c
                state = Text
            }

            Format -> {
                if c == '}' {
                    state = Text
                    value := @ptr_of_any(args[argIndex])
                    typ := @type_info_of_any(args[argIndex])
                    mut formatArg : string = ""

                    colon := formatSpecifier.index_of(':')
                    if colon >= 1 {
                        // colon -> arg index before colon
                        argIndex = parse_int(formatSpecifier.sliceL(colon))
                    } else if colon == -1 and formatSpecifier.length > 0 {
                        // no colon but non empty -> arg index
                        argIndex = parse_int(formatSpecifier.slice())
                    }
                    if colon != -1 {
                        // colon -> formatArg after colon
                        formatArg = formatSpecifier.sliceF(colon + 1)
                    }

                    if argIndex >= args.length {
                        C.puts("error")
                    }
                    @assert(argIndex >= 0 and argIndex < args.length)

                    if streq(formatArg, "?") {
                        format_any_into_string(result, value, typ, "", false)
                    } else {
                        format_any_into_string(result, value, typ, formatArg, true)
                    }

                    argIndex += 1
                    formatSpecifier.length = 0

                } else {
                    formatSpecifier += c
                }
            }
        }
    }
}

format :: (text: string, args: []^any = []) -> String {
    result := String.empty()
    format_into(&result, text, args)
    return result
}

#file_scope

format_any_into_string :: (result: &mut String, data: ^void, typ: ^TypeInfo, format: string, use_printable_if_possible: bool) {
    @assert(data != null)
    @assert(typ != null)
    if use_printable_if_possible {
        trait_func := typ.get_trait_function(Printable, "print", fn(^void, &mut String, string))
        if trait_func != null {
            trait_func(data, result, format)
            return
        }
    }

    match &*typ {
        // TypeInfoStruct($str) if str.get_trait_function(Printable, "print", fn(^void, &String, string)) != null -> {
        //     trait_func := str.get_trait_function(Printable, "print", fn(^void, &String, string))
        //     if trait_func != null {
        //         trait_func(data, result, "")
        //         return
        //     }
        // }

        TypeInfoString(_) -> {
            ptr := cast(^string) data
            result.append_string(*ptr)
        }

        TypeInfoInt($ti) -> {
            base := if streq("b", format) then 2
            else if streq("x", format) then 16
            else 10

            match (ti.size, ti.signed) {
                (1, true)  -> format_int(result, *cast(^i8) data, base)
                (2, true)  -> format_int(result, *cast(^i16) data, base)
                (4, true)  -> format_int(result, *cast(^i32) data, base)
                (8, true)  -> format_int(result, *cast(^i64) data, base)
                (1, false) -> format_int(result, *cast(^u8) data, base)
                (2, false) -> format_int(result, *cast(^u16) data, base)
                (4, false) -> format_int(result, *cast(^u32) data, base)
                (8, false) -> format_int(result, *cast(^u64) data, base)
            }
        }

        TypeInfoFloat(_) -> {
            if typ.size == 4 {
                ptr := cast(^float) data
                result.appendf("{}", *ptr)
            } else if typ.size == 8 {
                ptr := cast(^double) data
                result.appendf("{}", *ptr)
            } else {
                result.appendf("<float: invalid size {}>", typ.size)
                @assert(false)
            }
        }

        TypeInfoBool(_) -> {
            ptr := cast(^bool) data
            if *ptr then result.append_string("true") else result.append_string("false")
        }

        TypeInfoChar(_) -> {
            ptr := cast(^char) data
            result.appendf("'{}'", *ptr)
        }

        TypeInfoPointer($ti) -> {
            ptr := cast(^^void) data
            result.appendf("^0x{:x}", int(*ptr))
        }

        TypeInfoSlice($ti) -> {
            ptr := *cast(^[]void) data
            result += "["
            for i in 0..ptr.length {
                if i > 0 {
                    result += ", "
                }

                if i >= 100 {
                    result += "..."
                    break
                }

                elem := pointer_add(ptr.data, i * ti.target.size)
                format_any_into_string(result, elem, ti.target, format, use_printable_if_possible)
            }
            result += "]"
        }

        TypeInfoArray($ti) -> {
            ptr := cast(^void) data
            result += "["
            for i in 0..ti.count {
                if i > 0 {
                    result += ", "
                }

                if i >= 100 {
                    result += "..."
                    break
                }

                elem := pointer_add(ptr, i * ti.target.size)
                format_any_into_string(result, elem, ti.target, format, use_printable_if_possible)
            }
            result += "]"
        }

        TypeInfoStruct($tstruct) -> {
            ptr := cast(^void) data
            result += tstruct.name

            result += "("
            if tstruct.members.data != null {
                mut comma := false
                for i in 0..tstruct.members.length {
                    member_info := tstruct.members[i]
                    if member_info.has_attribute("fmt_ignore") then continue

                    if comma {
                        result += ", "
                    }
                    comma = true

                    member_ptr  := pointer_add(ptr, member_info.offset)
                    result += member_info.name
                    result += " = "
                    format_any_into_string(result, member_ptr, member_info.typ, format, use_printable_if_possible)
                }
            }
            result += ")"
        }

        TypeInfoEnum($tenum) -> {
            ptr := cast(^void) data
            result += tenum.name
            result += '.'

            if tenum.tag_type == null {
                result += '('
                for(by_ref=true) mem in tenum.members {
                    if it_index > 0 {
                        result += ", "
                    }
                    result += mem.name

                    if mem.typ != null {
                        mem_val_ptr := ptr

                        result += "("
                        format_any_into_string(result, mem_val_ptr, mem.typ, format, use_printable_if_possible)
                        result += ")"
                    }
                }
                result += ')'
            } else {
                tag_type := cast(^TypeInfoInt) tenum.tag_type

                tag := match tag_type.signed, tag_type.size {
                    false, 1  -> int(*cast(^u8) ptr)
                    false, 2  -> int(*cast(^u16) ptr)
                    false, 4  -> int(*cast(^u32) ptr)
                    false, 8  -> int(*cast(^u64) ptr)
                    true, 1  -> int(*cast(^i8) ptr)
                    true, 2  -> int(*cast(^i16) ptr)
                    true, 4  -> int(*cast(^i32) ptr)
                    true, 8  -> int(*cast(^i64) ptr)
                    $_ -> {
                        @panic("Unsupported tag size")
                        0
                    }
                }

                if tenum.is_flags {
                    result += "{"
                    mut comma := false
                    for(by_ref=false) mem in tenum.members {
                        if mem.tag != 0 and @bin_and(mem.tag, tag) == mem.tag {
                            if comma {
                                result += ", "
                            }
                            result += mem.name
                            comma = true
                        }
                    }
                    result += "}"
                } else {
                    mut found_member := false

                    for(by_ref=false) mem in tenum.members {
                        if mem.tag == tag {
                            result += mem.name

                            if mem.typ != null {
                                mem_val_ptr := pointer_add(ptr, tenum.tag_type.size)

                                result += "("
                                format_any_into_string(result, mem_val_ptr, mem.typ, format, use_printable_if_possible)
                                result += ")"
                            }

                            found_member = true
                            break
                        }
                    }

                    if !found_member {
                        format_into(result, "<{}>", [tag])
                    }
                }
            }
        }

        TypeInfoTuple($ti) -> {
            ptr := cast(^void) data

            result += "("
            if ti.members.data != null {
                for(by_ref=true) member_info in ti.members {
                    if it_index > 0 {
                        result += ", "
                    }

                    member_ptr := pointer_add(ptr, member_info.offset)
                    format_any_into_string(result, member_ptr, member_info.typ, format, use_printable_if_possible)
                }
            }
            result += ")"
        }

        TypeInfoFunction($ti) -> {
            ptr := cast(^^void) data
            result.appendf("fn 0x{:x}", int(*ptr))
        }

        TypeInfoReference($ti) -> {
            // result.appendf("&0x{:x} (", int(*cast(^^void) data))
            if ti.is_fat {
                trait_ptr : __Trait = *cast(^__Trait) data
                ptr, vtable_raw := Traits.destructure(trait_ptr)
                vtable := cast(^__VTable) vtable_raw
                format_any_into_string(result, ptr, vtable.type_info, format, use_printable_if_possible)
            } else {
                ref_ptr := cast(^^void) data
                ref := *ref_ptr
                format_any_into_string(result, ref, ti.target, format, use_printable_if_possible)
            }
            // result.append_string(")")
        }

        $_ -> {
            format_into(result, "<unknown {}>", [typ])
        }
    }
}
