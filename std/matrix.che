use import std.math
use import std.printable
use import std.string

#export_scope

/// Row-major 4x4 matrix
Matrix4 :: struct(T: type) #copy(T) #align(16) {
    values : [16]T = default
}

impl(T: type) Matrix4[T] {
    id :: () -> Self {
        return Self([
            1, 0, 0, 0
            0, 1, 0, 0
            0, 0, 1, 0
            0, 0, 0, 1 
        ])
    }

    from_translation :: (t: Vector3[T]) -> Self {
        return Self([
            1, 0, 0, t.x
            0, 1, 0, t.y
            0, 0, 1, t.z
            0, 0, 0, 1
        ])
    }

    from_uniform_scale :: (s: T) -> Self {
        return Self([
            s, 0, 0, 0
            0, s, 0, 0
            0, 0, s, 0
            0, 0, 0, 1
        ])
    }

    from_scale :: (s: Vector3[T]) -> Self {
        return Self([
            s.x, 0, 0, 0
            0, s.y, 0, 0
            0, 0, s.z, 0
            0, 0, 0, 1
        ])
    }

    from_rotation_x :: (angle: T) -> Self {
        c := cosf(angle)
        s := sinf(angle)
        return Self([
            1, 0, 0, 0
            0, c,-s, 0
            0, s, c, 0
            0, 0, 0, 1
        ])
    }

    from_rotation_y :: (angle: T) -> Self {
        c := cosf(angle)
        s := sinf(angle)
        return Self([
            c, 0, s, 0
            0, 1, 0, 0
           -s, 0, c, 0
            0, 0, 0, 1
        ])
    }

    from_rotation_z :: (angle: T) -> Self {
        c := cosf(angle)
        s := sinf(angle)
        return Self([
            c,-s, 0, 0
            s, c, 0, 0
            0, 0, 1, 0
            0, 0, 0, 1
        ])
    }
    
    look_at :: (eye: Vector3[T], target: Vector3[T], mut up: Vector3[T]) -> Self {
        up.normalize()

        camera_to_world := Self()

        // Initialize fourth column of viewing matrix
        *camera_to_world[(0, 3)] = eye.x
        *camera_to_world[(1, 3)] = eye.y
        *camera_to_world[(2, 3)] = eye.z
        *camera_to_world[(3, 3)] = 1

        // Initialize first three columns of viewing matrix
        dir := (target - eye).normalized()

        mut right := dir.cross(up)
        if right.magsq() == 0 {
            @assert(false)
        }

        right.normalize()
        new_up := right.cross(dir)
        *camera_to_world[(0, 0)] = right.x
        *camera_to_world[(1, 0)] = right.y
        *camera_to_world[(2, 0)] = right.z
        *camera_to_world[(3, 0)] = 0.0
        *camera_to_world[(0, 1)] = new_up.x
        *camera_to_world[(1, 1)] = new_up.y
        *camera_to_world[(2, 1)] = new_up.z
        *camera_to_world[(3, 1)] = 0.0
        *camera_to_world[(0, 2)] = dir.x
        *camera_to_world[(1, 2)] = dir.y
        *camera_to_world[(2, 2)] = dir.z
        *camera_to_world[(3, 2)] = 0.0

        return camera_to_world
    }

    perspective :: (near: T, far: T, fov: T, aspect: T, inverse_y: bool = false) -> Self {
        f_x := 1.0f / tanf(fov / 2.0f)
        f_y := if inverse_y then -f_x else f_x
        return Self([
            f_x / aspect, 0.0f, 0.0f,                0.0f
                    0.0f,  f_y, 0.0f,                0.0f
                    0.0f, 0.0f, -far / (far - near), -far * near / (far - near)
                    0.0f, 0.0f, -1,                  0.0f
        ])
    }

    perspective_reverse_z :: (near: T, fov: T, aspect: T, inverse_y: bool = false) -> Self {
        f_x := 1.0f / tanf(fov / 2.0f)
        f_y := if inverse_y then -f_x else f_x
        return Self([
            f_x / aspect, 0.0f,  0.0f, 0.0f
                    0.0f,  f_y,  0.0f, 0.0f
                    0.0f, 0.0f, -1.0f, -near
                    0.0f, 0.0f, -1.0f, 0.0f
        ])
    }

    // -y/-y + -near/-y == (-y - near) / -y
    // y/-y - (y-near)/-y == (near) / -y
    // 

    orthographic :: (left: T, right: T, bottom: T, top: T, near: T, far: T) -> Self {
        width  := right - left
        height := top - bottom
        depth  := far - near

        return Self([
            2.0f / width, 0             , 0             , -(right + left) / width
            0           , 2.0f / height , 0             , -(top + bottom) / height
            0           , 0             , -2.0f / depth , -(far + near)   / depth
            0           , 0             , 0             , 1
        ])
    }

    // invert_transform :: (Self) -> Self {
    //     return Self([
    //         1 / values[0]   , 0             , 0                 , -values[3]
    //         0               , 1 / values[5] , 0                 , -values[7]
    //         0               , 0             , 1 / values[10]    , -values[11]
    //         0               , 0             , 0                 , 1
    //     ])
    // }

    // pretend this matrix is an orthographic matrix and invert it
    invert_orthographic :: (&Self) -> Self {
        return Self([
            1 / *values[0]  , 0             , 0                 , -*values[3]
            0               , 1 / *values[5], 0                 , -*values[7]
            0               , 0             , 1 / *values[10]   , -*values[11]
            0               , 0             , 0                 , 1
        ])
    }

    orthographic_inverse :: (left: T, right: T, bottom: T, top: T, near: T, far: T) -> Self {
        width  := right - left
        height := top - bottom
        depth  := far - near

        return Self([
            width / 2.0f, 0             , 0             , (right + left) / width
            0           , height / 2.0f , 0             , (top + bottom) / height
            0           , 0             , depth / -2.0f , (far + near)   / depth 
            0           , 0             , 0             , 1
        ])
    }

    invert :: (&mut Self) -> Result[(), ()] {
        mut inv : [16]T = default
        m := self.values[..]

        *inv[0] = (*m[5])  * (*m[10]) * (*m[15]) - 
                (*m[5])  * (*m[11]) * (*m[14]) - 
                (*m[9])  * (*m[6])  * (*m[15]) + 
                (*m[9])  * (*m[7])  * (*m[14]) +
                (*m[13]) * (*m[6])  * (*m[11]) - 
                (*m[13]) * (*m[7])  * (*m[10])

        *inv[4] = -(*m[4])  * (*m[10]) * (*m[15]) + 
                (*m[4])  * (*m[11]) * (*m[14]) + 
                (*m[8])  * (*m[6])  * (*m[15]) - 
                (*m[8])  * (*m[7])  * (*m[14]) - 
                (*m[12]) * (*m[6])  * (*m[11]) + 
                (*m[12]) * (*m[7])  * (*m[10])

        *inv[8] = (*m[4])  * (*m[9]) * (*m[15]) - 
                (*m[4])  * (*m[11]) * (*m[13]) - 
                (*m[8])  * (*m[5]) * (*m[15]) + 
                (*m[8])  * (*m[7]) * (*m[13]) + 
                (*m[12]) * (*m[5]) * (*m[11]) - 
                (*m[12]) * (*m[7]) * (*m[9])

        *inv[12] = -(*m[4])  * (*m[9]) * (*m[14]) + 
                (*m[4])  * (*m[10]) * (*m[13]) +
                (*m[8])  * (*m[5]) * (*m[14]) - 
                (*m[8])  * (*m[6]) * (*m[13]) - 
                (*m[12]) * (*m[5]) * (*m[10]) + 
                (*m[12]) * (*m[6]) * (*m[9])

        *inv[1] = -(*m[1])  * (*m[10]) * (*m[15]) + 
                (*m[1])  * (*m[11]) * (*m[14]) + 
                (*m[9])  * (*m[2]) * (*m[15]) - 
                (*m[9])  * (*m[3]) * (*m[14]) - 
                (*m[13]) * (*m[2]) * (*m[11]) + 
                (*m[13]) * (*m[3]) * (*m[10])

        *inv[5] = (*m[0])  * (*m[10]) * (*m[15]) - 
                (*m[0])  * (*m[11]) * (*m[14]) - 
                (*m[8])  * (*m[2]) * (*m[15]) + 
                (*m[8])  * (*m[3]) * (*m[14]) + 
                (*m[12]) * (*m[2]) * (*m[11]) - 
                (*m[12]) * (*m[3]) * (*m[10])

        *inv[9] = -(*m[0])  * (*m[9]) * (*m[15]) + 
                (*m[0])  * (*m[11]) * (*m[13]) + 
                (*m[8])  * (*m[1]) * (*m[15]) - 
                (*m[8])  * (*m[3]) * (*m[13]) - 
                (*m[12]) * (*m[1]) * (*m[11]) + 
                (*m[12]) * (*m[3]) * (*m[9])

        *inv[13] = (*m[0])  * (*m[9]) * (*m[14]) - 
                (*m[0])  * (*m[10]) * (*m[13]) - 
                (*m[8])  * (*m[1]) * (*m[14]) + 
                (*m[8])  * (*m[2]) * (*m[13]) + 
                (*m[12]) * (*m[1]) * (*m[10]) - 
                (*m[12]) * (*m[2]) * (*m[9])

        *inv[2] = (*m[1])  * (*m[6]) * (*m[15]) - 
                (*m[1])  * (*m[7]) * (*m[14]) - 
                (*m[5])  * (*m[2]) * (*m[15]) + 
                (*m[5])  * (*m[3]) * (*m[14]) + 
                (*m[13]) * (*m[2]) * (*m[7]) - 
                (*m[13]) * (*m[3]) * (*m[6])

        *inv[6] = -(*m[0])  * (*m[6]) * (*m[15]) + 
                (*m[0])  * (*m[7]) * (*m[14]) + 
                (*m[4])  * (*m[2]) * (*m[15]) - 
                (*m[4])  * (*m[3]) * (*m[14]) - 
                (*m[12]) * (*m[2]) * (*m[7]) + 
                (*m[12]) * (*m[3]) * (*m[6])

        *inv[10] = (*m[0])  * (*m[5]) * (*m[15]) - 
                (*m[0])  * (*m[7]) * (*m[13]) - 
                (*m[4])  * (*m[1]) * (*m[15]) + 
                (*m[4])  * (*m[3]) * (*m[13]) + 
                (*m[12]) * (*m[1]) * (*m[7]) - 
                (*m[12]) * (*m[3]) * (*m[5])

        *inv[14] = -(*m[0])  * (*m[5]) * (*m[14]) + 
                (*m[0])  * (*m[6]) * (*m[13]) + 
                (*m[4])  * (*m[1]) * (*m[14]) - 
                (*m[4])  * (*m[2]) * (*m[13]) - 
                (*m[12]) * (*m[1]) * (*m[6]) + 
                (*m[12]) * (*m[2]) * (*m[5])

        *inv[3] = -(*m[1]) * (*m[6]) * (*m[11]) + 
                (*m[1]) * (*m[7]) * (*m[10]) + 
                (*m[5]) * (*m[2]) * (*m[11]) - 
                (*m[5]) * (*m[3]) * (*m[10]) - 
                (*m[9]) * (*m[2]) * (*m[7]) + 
                (*m[9]) * (*m[3]) * (*m[6])

        *inv[7] = (*m[0]) * (*m[6]) * (*m[11]) - 
                (*m[0]) * (*m[7]) * (*m[10]) - 
                (*m[4]) * (*m[2]) * (*m[11]) + 
                (*m[4]) * (*m[3]) * (*m[10]) + 
                (*m[8]) * (*m[2]) * (*m[7]) - 
                (*m[8]) * (*m[3]) * (*m[6])

        *inv[11] = -(*m[0]) * (*m[5]) * (*m[11]) + 
                (*m[0]) * (*m[7]) * (*m[9]) + 
                (*m[4]) * (*m[1]) * (*m[11]) - 
                (*m[4]) * (*m[3]) * (*m[9]) - 
                (*m[8]) * (*m[1]) * (*m[7]) + 
                (*m[8]) * (*m[3]) * (*m[5])

        *inv[15] = (*m[0]) * (*m[5]) * (*m[10]) - 
                (*m[0]) * (*m[6]) * (*m[9]) - 
                (*m[4]) * (*m[1]) * (*m[10]) + 
                (*m[4]) * (*m[2]) * (*m[9]) + 
                (*m[8]) * (*m[1]) * (*m[6]) - 
                (*m[8]) * (*m[2]) * (*m[5])

        mut det := (*m[0]) * (*inv[0]) + (*m[1]) * (*inv[4]) + (*m[2]) * (*inv[8]) + (*m[3]) * (*inv[12])

        if det == 0 {
            return Err()
        }

        det = 1.0 / det

        *self.values[0]  = det * (*inv[0])
        *self.values[1]  = det * (*inv[1])
        *self.values[2]  = det * (*inv[2])
        *self.values[3]  = det * (*inv[3])
        *self.values[4]  = det * (*inv[4])
        *self.values[5]  = det * (*inv[5])
        *self.values[6]  = det * (*inv[6])
        *self.values[7]  = det * (*inv[7])
        *self.values[8]  = det * (*inv[8])
        *self.values[9]  = det * (*inv[9])
        *self.values[10] = det * (*inv[10])
        *self.values[11] = det * (*inv[11])
        *self.values[12] = det * (*inv[12])
        *self.values[13] = det * (*inv[13])
        *self.values[14] = det * (*inv[14])
        *self.values[15] = det * (*inv[15])
        return Ok()
    }

    inverse :: (Self) -> Self {
        mut result := self
        result.invert()
        return result
    }

    data :: (&Self) -> ^T {
        return values.data
    }

    muls :: (&mut Self, s: T) #operator("*=") {
        for &mut it in values[..] {
            *it *= s
        }
    }

    mulm :: (&mut Self, other: &Matrix4[T]) #operator("*=") {
        // copy of own values
        a := values
        b : []T = other.values
        for c in 0..4 {
            for r in 0..4 {
                mut sum : T = 0
                for i in 0..4 {
                    sum += *a[i + r * 4] * *b[c + i * 4]
                }
                *values[c + r * 4] = sum
            }
        }
    }

    mulmm :: (ma: Matrix4[T], mb: Matrix4[T]) -> Matrix4[T] #operator("*") {
        a : []T = ma.values
        b : []T = mb.values
        mut result := Matrix4[T]()
        for c in 0..4 {
            for r in 0..4 {
                mut sum : T = 0
                for i in 0..4 {
                    sum += *a[i + r * 4] * *b[c + i * 4]
                }
                *result.values[c + r * 4] = sum
            }
        }
        return result
    }

    mulmv :: (ma: &Matrix4[T], v: Vector3[T]) -> Vector3[T] #operator("*") {
        a : []T = ma.values
        return Vector3[T](
            x = *a[0] * v.x + *a[1] * v.y + *a[2]  * v.z + *a[3]
            y = *a[4] * v.x + *a[5] * v.y + *a[6]  * v.z + *a[7]
            z = *a[8] * v.x + *a[9] * v.y + *a[10] * v.z + *a[11]
        )
    }

    mulv :: (ma: &Matrix4[T], v: Vector3[T], w: T = 1) -> Vector3[T] {
        a : []T = ma.values
        return Vector3[T](
            x = *a[0] * v.x + *a[1] * v.y + *a[2]  * v.z + *a[3]  * w
            y = *a[4] * v.x + *a[5] * v.y + *a[6]  * v.z + *a[7]  * w
            z = *a[8] * v.x + *a[9] * v.y + *a[10] * v.z + *a[11] * w
        )
    }

    mulv :: (ma: &Matrix4[T], v: Vector4[T]) -> Vector4[T] #operator("*") {
        a : []T = ma.values
        return Vector4[T](
            x = *a[0] * v.x + *a[1] * v.y + *a[2]  * v.z + *a[3]  * v.w
            y = *a[4] * v.x + *a[5] * v.y + *a[6]  * v.z + *a[7]  * v.w
            z = *a[8] * v.x + *a[9] * v.y + *a[10] * v.z + *a[11] * v.w
            w = *a[12] * v.x + *a[13] * v.y + *a[14] * v.z + *a[15] * v.w
        )
    }

    access_mut :: (&mut Self, idx: (row: int, col: int)) -> &mut T #operator("[]") {
        @assert(idx.row >= 0 and idx.row < 4 and idx.col >= 0 and idx.col < 4)
        return self.values[idx.col + idx.row * 4]
    }

    // access :: (&Self, idx: (row: int, col: int)) -> T #operator("[]") {
    //     @assert(idx.row >= 0 and idx.row < 4 and idx.col >= 0 and idx.col < 4)
    //     return *self.values[idx.col + idx.row * 4]
    // }
}

impl(T: type) Printable for Matrix4[T] {
    print :: (&Self, str: &mut String, format: string) {
        for r in 0..4 {
            if r > 0 then str.append_string("`n")
            for c in 0..4 {
                if c > 0 then str.append_string(" | ")
                str.appendf("{}", *values[c + r * 4])
            }
        }
    }
}