use import std.string
use import std.map
use import std.mem.allocator
use import std.mem.arena_allocator
C :: import std.c

#export_scope

StringCache :: struct {
    pool    := ArenaAllocator.new(1024)
    db      := Map[string, string].new()
}

impl StringCache {
    intern :: (&Self, str: string) -> string {
        return match self.db.get(str) {
            Some($s) -> *s
            None -> {
                // create string in pool
                str_in_pool := {
                    mem := alloc_n(u8, cast str.bytes.length + 1, ^self.pool)
                    string(mem.data, str.bytes.length)
                }
                C.memcpy(str_in_pool.bytes.data, str.bytes.data, cast str.bytes.length)
                str_in_pool.bytes.data[str.bytes.length] = 0
                self.db.set(str_in_pool, str_in_pool)
                str_in_pool
            }
        }
    }

    intern_c :: (&Self, str: string) -> ^char8 {
        return match self.db.get(str) {
            Some($s) -> {
                @assert(s.bytes.data[s.bytes.length] == 0)
                cast(^char8) s.bytes.data
            }
            None -> {
                // create string in pool
                str_in_pool := {
                    mem := alloc_n(u8, cast str.bytes.length + 1, ^self.pool)
                    string(mem.data, str.bytes.length)
                }
                C.memcpy(str_in_pool.bytes.data, str.bytes.data, cast str.bytes.length)
                str_in_pool.bytes.data[str.bytes.length] = 0
                self.db.set(str_in_pool, str_in_pool)
                cast(^char8) str_in_pool.bytes.data
            }
        }
    }
}